
AWSTemplateFormatVersion: "2010-09-09"

Transform: "AWS::Serverless-2016-10-31"

Description: Deploy a nice API.

Resources:

  APILambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Role: !GetAtt APILambdaExecutionRole.Arn
      Handler: a_nice_function.handler
      Runtime: python2.7
      Timeout: 30
      Description: "A function returning some nice stuffs."

  APILambdaFunctionPermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: "lambda:InvokeFunction"
      SourceArn: !Join [ "", [ "arn:aws:execute-api:", !Ref "AWS::Region", ":", !Ref "AWS::AccountId", ":*" ] ]
      FunctionName: !GetAtt APILambdaFunction.Arn
      Principal: "apigateway.amazonaws.com"

  APILambdaExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: "APILambdaExecutionRole"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - "lambda.amazonaws.com"
          Action:
          - "sts:AssumeRole"
      Policies:
        -
          PolicyName: "APILambdaPermission"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Effect: "Allow"
                Action:
                  - "s3:put*"
                  - "s3:getObject*"
                Resource: "*"
      ManagedPolicyArns:
      - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"

  APIDeployment:
    Type: "AWS::ApiGateway::Deployment"
    Properties:
      RestApiId: !Ref NiceAPI
      StageName: "APIDeployment"

  APIStage:
    Type: "AWS::ApiGateway::Stage"
    Properties:
      DeploymentId: !Ref APIDeployment
      MethodSettings:
        -
          DataTraceEnabled: true
          HttpMethod: "*"
          LoggingLevel: "INFO"
          ResourcePath: "/*"
      RestApiId: !Ref NiceAPI
      StageName: "APIStage"

  NiceAPI:
    Type: "AWS::ApiGateway::RestApi"
    Properties:
      Name: "NiceAPI"
      Description: "A nice API."
      FailOnWarnings: true
      Body:
        swagger: "2.0"
        info:
          description: "A nice API"
          version: "1.0.0"
          title: "NiceAPI"
          termsOfService: "http://niceapi.net/cgu.html"
          contact:
            email: "support@niceapi.net"
          license:
            name: "Copyright (C) NiceAPI S.A."
            url: "niceapi.net/LICENSE.txt"
        host: "niceapi.net"
        basePath: "/"
        tags:
        - name: "collection"
          description: "Find the information about your Collections"
          externalDocs:
            description: "Find the documentation about this API"
            url: "http://niceapi.net/doc"
        - name: "Item"
          description: "Find the information about your Items"
          externalDocs:
            description: "Find the documentation about this API"
            url: "http://niceapi.net/doc"
        - name: "doc"
          description: "Operations about user"
          externalDocs:
            description: "Find the documentation about this API"
            url: "http://niceapi.net/doc"
        schemes:
        - "https"
        paths:
          /collection/{collectionId}:
            get:
              tags:
              - "collection"
              summary: "Find collection by ID"
              description: "Returns a single collection"
              operationId: "getCollectionById"
              produces:
              - "application/json"
              parameters:
              - name: "collectionId"
                in: "path"
                description: "ID of Collection to return"
                required: true
                type: "string"
              - name: X-NiceAPI-API-key
                in: header
                description: NiceAPI API key for authentication
                required: true
                type: string
                format: string
              responses:
                "200":
                  description: "successful operation"
                  schema:
                    $ref: "#/definitions/ApiResponse"
                "400":
                  description: "Invalid ID supplied"
                "404":
                  description: "Collection not found"
              x-amazon-apigateway-integration:
                requestTemplates:
                  application/json: |
                    {
                      "body" : $input.json('$'),
                      "headers": {
                        #foreach($header in $input.params().header.keySet())
                        "$header": "$util.escapeJavaScript($input.params().header.get($header))" #if($foreach.hasNext),#end

                        #end
                      },
                      "method": "$context.httpMethod",
                      "params": {
                        #foreach($param in $input.params().path.keySet())
                        "$param": "$util.escapeJavaScript($input.params().path.get($param))" #if($foreach.hasNext),#end

                        #end
                      },
                      "query": {
                        #foreach($queryParam in $input.params().querystring.keySet())
                        "$queryParam": "$util.escapeJavaScript($input.params().querystring.get($queryParam))" #if($foreach.hasNext),#end

                        #end
                      }
                    }
                uri: !Join [ "", [ "arn:aws:apigateway:", !Ref "AWS::Region", ":lambda:path/2015-03-31/functions/", !GetAtt APILambdaFunction.Arn, "/invocations" ]]
                responses:
                  default:
                    statusCode: "200"
                httpMethod: "POST"
                type: "aws"
          /collection/{collectionId}/Items:
            get:
              tags:
              - "collection"
              summary: "Find all the Items of a collection using the collection ID"
              description: "Returns all the items of an collection given its ID"
              operationId: "items"
              produces:
              - "application/json"
              parameters:
              - name: "collectionId"
                in: "path"
                description: "ID of the collection from which get the items"
                required: true
                type: "string"
              - name: X-NiceAPI-API-key
                in: header
                description: NiceAPI API key for authentication
                required: true
                type: string
                format: string
              responses:
                "200":
                  description: "successful operation"
                  schema:
                    $ref: "#/definitions/ApiResponse"
                "400":
                  description: "Invalid ID supplied"
                "404":
                  description: "Collection not found"
              x-amazon-apigateway-integration:
                requestTemplates:
                  application/json: |
                    {
                      "body" : $input.json('$'),
                      "headers": {
                        #foreach($header in $input.params().header.keySet())
                        "$header": "$util.escapeJavaScript($input.params().header.get($header))" #if($foreach.hasNext),#end

                        #end
                      },
                      "method": "$context.httpMethod",
                      "params": {
                        #foreach($param in $input.params().path.keySet())
                        "$param": "$util.escapeJavaScript($input.params().path.get($param))" #if($foreach.hasNext),#end

                        #end
                      },
                      "query": {
                        #foreach($queryParam in $input.params().querystring.keySet())
                        "$queryParam": "$util.escapeJavaScript($input.params().querystring.get($queryParam))" #if($foreach.hasNext),#end

                        #end
                      }
                    }
                uri: !Join [ "", [ "arn:aws:apigateway:", !Ref "AWS::Region", ":lambda:path/2015-03-31/functions/", !GetAtt APILambdaFunction.Arn, "/invocations" ]]
                responses:
                  default:
                    statusCode: "200"
                httpMethod: "POST"
                type: "aws"
          /item/{itemId}:
            get:
              tags:
              - "item"
              summary: "Find item by ID"
              description: "Returns a single item"
              operationId: "getItemById"
              produces:
              - "application/json"
              parameters:
              - name: "itemId"
                in: "path"
                description: "ID of the item to return"
                required: true
                type: "string"
              - name: X-NiceAPI-API-key
                in: header
                description: NiceAPI API key for authentication
                required: true
                type: string
                format: string
              responses:
                "200":
                  description: "successful operation"
                  schema:
                    $ref: "#/definitions/ApiResponse"
                "400":
                  description: "Invalid ID supplied"
                "404":
                  description: "Item not found"
              x-amazon-apigateway-integration:
                requestTemplates:
                  application/json: |
                    {
                      "body" : $input.json('$'),
                      "headers": {
                        #foreach($header in $input.params().header.keySet())
                        "$header": "$util.escapeJavaScript($input.params().header.get($header))" #if($foreach.hasNext),#end

                        #end
                      },
                      "method": "$context.httpMethod",
                      "params": {
                        #foreach($param in $input.params().path.keySet())
                        "$param": "$util.escapeJavaScript($input.params().path.get($param))" #if($foreach.hasNext),#end

                        #end
                      },
                      "query": {
                        #foreach($queryParam in $input.params().querystring.keySet())
                        "$queryParam": "$util.escapeJavaScript($input.params().querystring.get($queryParam))" #if($foreach.hasNext),#end

                        #end
                      }
                    }
                uri: !Join [ "", [ "arn:aws:apigateway:", !Ref "AWS::Region", ":lambda:path/2015-03-31/functions/", !GetAtt APILambdaFunction.Arn, "/invocations" ]]
                responses:
                  default:
                    statusCode: "200"
                httpMethod: "POST"
                type: "aws"
        definitions:
          Collection:
            type: "object"
            required:
            - "id"
            properties:
              id:
                type: "string"
                description: "The ID of the Collection"
              name:
                type: "string"
                description: "The name of the Collection"
              owner:
                type: "string"
                description: "The username of the Collection's owner"
          Item:
            type: "object"
            required:
            - "id"
            properties:
              id:
                type: "string"
                description: "The ID of the Item"
              url:
                type: "string"
                description: "The url of the file of the Item"
              owner:
                type: "string"
                description: "The username of the Item's owner"
          ApiResponse:
            type: "object"
            properties:
              code:
                type: "integer"
                format: "int32"
              results:
                type: "object"
        externalDocs:
          description: "Find out more about NiceApi"
          url: "http://niceapi.net/doc"











